define("dummy/app",["ember","ember/resolver","ember/load-initializers","dummy/config/environment","exports"],function(e,t,l,n,a){"use strict";var o=e["default"],s=t["default"],i=l["default"],r=n["default"];o.MODEL_FACTORY_INJECTIONS=!0;var c=o.Application.extend({rootElement:"#application",modulePrefix:r.modulePrefix,podModulePrefix:r.podModulePrefix,Resolver:s});i(c,r.modulePrefix),a["default"]=c}),define("dummy/components/google-map",["ember","ember-google-map/core/helpers","ember-google-map/mixins/google-object","exports"],function(e,t,l,n){"use strict";function a(e){return o.Object.create(e)}var o=e["default"],s=t["default"],i=l["default"],r=o.A([a({id:"road",label:"road"}),a({id:"satellite",label:"satellite"}),a({id:"terrain",label:"terrain"}),a({id:"hybrid",label:"hybrid"})]);n.MAP_TYPES=r;var c=o.A([a({id:s.PLACE_TYPE_ADDRESS,label:"address"}),a({id:s.PLACE_TYPE_LOCALITY,label:"locality"}),a({id:s.PLACE_TYPE_ADMIN_REGION,label:"administrative region"}),a({id:s.PLACE_TYPE_BUSINESS,label:"business"})]);n.PLACE_TYPES=c;var h=o.Component.extend(i,{classNames:["google-map"],googleProperties:{zoom:{event:"zoom_changed",cast:s.cast.integer},type:{name:"mapTypeId",event:"maptypeid_changed",toGoogle:s._typeToGoogle,fromGoogle:s._typeFromGoogle},"lat,lng":{name:"center",event:"center_changed",toGoogle:s._latLngToGoogle,fromGoogle:s._latLngFromGoogle}},googleObject:null,lat:0,lng:0,zoom:5,type:"road",markers:null,_markers:o.computed(function(){return this.container.lookupFactory("controller:google-map/markers").create({parentController:this})}).readOnly(),markerController:"google-map/marker",markerViewClass:"google-map/marker",markerInfoWindowTemplateName:"google-map/info-window",markerHasInfoWindow:!0,polylines:null,_polylines:o.computed(function(){return this.container.lookupFactory("controller:google-map/polylines").create({parentController:this})}).readOnly(),polylineController:"google-map/polyline",polylinePathController:"google-map/polyline-path",polylineViewClass:"google-map/polyline",circles:null,_circles:o.computed(function(){return this.container.lookupFactory("controller:google-map/circles").create({parentController:this})}).readOnly(),circleController:"google-map/circle",circleViewClass:"google-map/circle",infoWindows:null,_infoWindows:o.computed(function(){return this.container.lookupFactory("controller:google-map/info-windows").create({parentController:this})}).readOnly(),infoWindowController:"google-map/info-window",infoWindowViewClass:"google-map/info-window",infoWindowTemplateName:"google-map/info-window",map:o.computed.oneWay("googleObject"),initGoogleMap:o.on("didInsertElement",function(){var e,t,l;this.destroyGoogleMap(),s.hasGoogleLib()&&(e=this.$("div.map-canvas")[0],t=this.serializeGoogleOptions(),o.debug("[google-map] creating map with options: %@".fmt(t)),l=new google.maps.Map(e,t),this.set("googleObject",l),this.synchronizeEmberObject())}),destroyGoogleMap:o.on("willDestroyElement",function(){this.get("googleObject")&&(o.debug("[google-map] destroying map"),this.set("googleObject",null))})});n["default"]=h}),define("dummy/controllers/application",["ember","dummy/components/google-map","exports"],function(e,t,l){"use strict";var n=e["default"],a=t.MAP_TYPES;l["default"]=n.Controller.extend({lat:0,lng:0,zoom:5,type:"road",mapTypes:a,markers:[{title:"one",lat:5,lng:5,description:"hello 1",isDraggable:!0},{title:"two",lat:5,lng:0,hasInfoWindow:!1},{title:"three",lat:0,lng:5,infoWindowTemplateName:"marker-info-window",helloWorld:"Hello World!"}],infoWindows:[{title:"some info window",lat:-5,lng:-5,description:"hello everybody!"}],polylines:[{isEditable:!0,path:[{lat:2.8,lng:-3.6},{lat:1.5,lng:.2},{lat:-3,lng:2},{lat:-5.5,lng:-.8},{lat:-5.9,lng:-8.9},{lat:-3.4,lng:-11.6},{lat:1.2,lng:-11.1},{lat:2.8,lng:-7}],strokeOpacity:.8,strokeColor:"blue"}],circles:[{isEditable:!0,lat:-4.4,lng:6.8,radius:314907}],actions:{addMarker:function(){this.get("markers").addObject({title:"new",lat:0,lng:0,isDraggable:!0})},removeMarker:function(e){this.get("markers").removeObject(e)},addCircle:function(){this.get("circles").addObject({lat:0,lng:0,radius:3e5,isEditable:!0})},removeCircle:function(e){this.get("circles").removeObject(e)},addInfoWindow:function(){this.get("infoWindows").addObject({title:"new iw",description:"hello",lat:-5,lng:0})},removeInfoWindow:function(e){this.get("infoWindows").removeObject(e)},addPolyline:function(){this.get("polylines").addObject({isEditable:!1,path:[{lat:0,lng:0},{lat:1,lng:0}]})},removePolyline:function(e){this.get("polylines").removeObject(e)},addPolylinePathItem:function(e){e.addObject({lat:1,lng:1})},removePolylinePathItem:function(e,t){e.removeObject(t)}}})}),define("dummy/controllers/google-map/circle",["ember","exports"],function(e,t){"use strict";var l=e["default"];t["default"]=l.ObjectController.extend({})}),define("dummy/controllers/google-map/circles",["ember","exports"],function(e,t){"use strict";var l=e["default"];t["default"]=l.ArrayController.extend({itemController:l.computed.alias("parentController.circleController"),model:l.computed.alias("parentController.circles")})}),define("dummy/controllers/google-map/info-window",["ember","exports"],function(e,t){"use strict";var l=e["default"];t["default"]=l.ObjectController.extend({})}),define("dummy/controllers/google-map/info-windows",["ember","exports"],function(e,t){"use strict";var l=e["default"];t["default"]=l.ArrayController.extend({itemController:l.computed.alias("parentController.infoWindowController"),model:l.computed.alias("parentController.infoWindows")})}),define("dummy/controllers/google-map/marker",["ember","exports"],function(e,t){"use strict";var l=e["default"];t["default"]=l.ObjectController.extend({})}),define("dummy/controllers/google-map/markers",["ember","exports"],function(e,t){"use strict";var l=e["default"];t["default"]=l.ArrayController.extend({itemController:l.computed.alias("parentController.markerController"),model:l.computed.alias("parentController.markers")})}),define("dummy/controllers/google-map/polyline-path",["ember","ember-google-map/mixins/google-array","ember-google-map/core/helpers","exports"],function(e,t,l,n){"use strict";var a=e["default"],o=t["default"],s=l["default"];n["default"]=a.ArrayController.extend(o,{model:a.computed.alias("parentController.path"),googleItemFactory:s._latLngToGoogle,emberItemFactory:function(e){return a.Object.create(s._latLngFromGoogle(e))},observeEmberProperties:["lat","lng"]})}),define("dummy/controllers/google-map/polyline",["ember","exports"],function(e,t){"use strict";var l=e["default"];t["default"]=l.ObjectController.extend({pathController:l.computed.alias("parentController.pathController"),_path:l.computed("path","pathController",function(){return this.container.lookupFactory("controller:"+this.get("pathController")).create({parentController:this})}).readOnly()})}),define("dummy/controllers/google-map/polylines",["ember","exports"],function(e,t){"use strict";var l=e["default"];t["default"]=l.ArrayController.extend({itemController:l.computed.alias("parentController.polylineController"),model:l.computed.alias("parentController.polylines"),pathController:l.computed.alias("parentController.polylinePathController")})}),define("dummy/initializers/export-application-global",["ember","dummy/config/environment","exports"],function(e,t,l){"use strict";function n(e,t){var l=a.String.classify(o.modulePrefix);o.exportApplicationGlobal&&(window[l]=t)}var a=e["default"],o=t["default"];l.initialize=n,l["default"]={name:"export-application-global",initialize:n}}),define("dummy/router",["ember","dummy/config/environment","exports"],function(e,t,l){"use strict";var n=e["default"],a=t["default"],o=n.Router.extend({location:a.locationType});o.map(function(){}),l["default"]=o}),define("dummy/templates/application",["ember","exports"],function(e,t){"use strict";var l=e["default"];t["default"]=l.Handlebars.template(function(e,t,n,a,o){function s(e,t){var l,a,o="";return t.buffer.push("\n      <li>\n        <label>title: "),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{value:"title"},hashTypes:{value:"ID"},hashContexts:{value:e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("</label>\n        <label>desc.: "),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{value:"description"},hashTypes:{value:"ID"},hashContexts:{value:e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("</label>\n        <label>lat/lng: "),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{value:"lat","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:e,"class":e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("/"),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{value:"lng","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:e,"class":e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("</label>\n        <label>"),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{type:"checkbox",checked:"isVisible"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("visible</label> |\n        <label>"),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{type:"checkbox",checked:"isDraggable"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("draggable</label>\n        <button "),t.buffer.push(m(n.action.call(e,"removeMarker","",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e],types:["STRING","ID"],data:t}))),t.buffer.push(">x</button>\n      </li>\n    "),o}function i(e,t){var l,a,o="";return t.buffer.push("\n      <li>\n        <label>title: "),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{value:"title"},hashTypes:{value:"ID"},hashContexts:{value:e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("</label>\n        <label>desc.: "),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{value:"description"},hashTypes:{value:"ID"},hashContexts:{value:e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("</label>\n        <label>lat/lng: "),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{value:"lat","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:e,"class":e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("/"),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{value:"lng","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:e,"class":e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("</label>\n        <label>"),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{type:"checkbox",checked:"isVisible"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("visible</label>\n        <button "),t.buffer.push(m(n.action.call(e,"removeInfoWindow","",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e],types:["STRING","ID"],data:t}))),t.buffer.push(">x</button>\n      </li>\n    "),o}function r(e,t){var l,a,o,s="";return t.buffer.push("\n      <li>\n        <label>"),t.buffer.push(m((a=n.input||e&&e.input,o={hash:{type:"checkbox",checked:"isVisible"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},contexts:[],types:[],data:t},a?a.call(e,o):g.call(e,"input",o)))),t.buffer.push("visible</label> |\n        <label>"),t.buffer.push(m((a=n.input||e&&e.input,o={hash:{type:"checkbox",checked:"isDraggable"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},contexts:[],types:[],data:t},a?a.call(e,o):g.call(e,"input",o)))),t.buffer.push("draggable</label>\n        <label>"),t.buffer.push(m((a=n.input||e&&e.input,o={hash:{type:"checkbox",checked:"isEditable"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},contexts:[],types:[],data:t},a?a.call(e,o):g.call(e,"input",o)))),t.buffer.push("editable</label>\n        <button "),t.buffer.push(m(n.action.call(e,"removePolyline","",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e],types:["STRING","ID"],data:t}))),t.buffer.push('>x</button>\n        <ul class="plyline-path">\n          '),l=n.each.call(e,"entry","in","path",{hash:{},hashTypes:{},hashContexts:{},inverse:b.noop,fn:b.program(6,c,t),contexts:[e,e,e],types:["ID","ID","ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push("\n        </ul>\n        <button "),t.buffer.push(m(n.action.call(e,"addPolylinePathItem","path",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e],types:["STRING","ID"],data:t}))),t.buffer.push(">add</button>\n      </li>\n    "),s}function c(e,t){var l,a,o="";return t.buffer.push("\n            <li>\n              <label>lat/lng: "),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{value:"entry.lat","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:e,"class":e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("\n                /"),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{value:"entry.lng","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:e,"class":e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("</label>\n              <button "),t.buffer.push(m(n.action.call(e,"removePolylinePathItem","path","entry",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e,e],types:["STRING","ID","ID"],data:t}))),t.buffer.push(">x</button>\n            </li>\n          "),o}function h(e,t){var l,a,o="";return t.buffer.push("\n      <li>\n        <label>center lat/lng: "),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{value:"lat","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:e,"class":e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("\n          /"),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{value:"lng","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:e,"class":e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("</label>\n        <label>radius: "),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{value:"radius","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:e,"class":e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("</label>\n        <label>"),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{type:"checkbox",checked:"isVisible"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("visible</label> |\n        <label>"),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{type:"checkbox",checked:"isDraggable"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("draggable</label> |\n        <label>"),t.buffer.push(m((l=n.input||e&&e.input,a={hash:{type:"checkbox",checked:"isEditable"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},contexts:[],types:[],data:t},l?l.call(e,a):g.call(e,"input",a)))),t.buffer.push("editable</label>\n        <button "),t.buffer.push(m(n.action.call(e,"removeCircle","",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e],types:["STRING","ID"],data:t}))),t.buffer.push(">x</button>\n      </li>\n    "),o}this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,l.Handlebars.helpers),o=o||{};var u,p,d,f="",g=n.helperMissing,m=this.escapeExpression,b=this;return o.buffer.push('<h2 id="title">\n  Simple example of using\n  <a href="https://github.com/huafu/ember-google-map">ember-google-map</a>\n</h2>\n\n'),o.buffer.push(m((p=n["google-map"]||t&&t["google-map"],d={hash:{lat:"lat",lng:"lng",type:"type",zoom:"zoom",markers:"markers",infoWindows:"infoWindows",markerInfoWindowTemplateName:"marker-info-window",polylines:"polylines",circles:"circles",gopt_mapTypeControl:!1,gopt_backgroundColor:"transparent"},hashTypes:{lat:"ID",lng:"ID",type:"ID",zoom:"ID",markers:"ID",infoWindows:"ID",markerInfoWindowTemplateName:"STRING",polylines:"ID",circles:"ID",gopt_mapTypeControl:"BOOLEAN",gopt_backgroundColor:"STRING"},hashContexts:{lat:t,lng:t,type:t,zoom:t,markers:t,infoWindows:t,markerInfoWindowTemplateName:t,polylines:t,circles:t,gopt_mapTypeControl:t,gopt_backgroundColor:t},contexts:[],types:[],data:o},p?p.call(t,d):g.call(t,"google-map",d)))),o.buffer.push("\n\n<h3>Map settings</h3>\n<div>\n  <label>center lat/lng: "),o.buffer.push(m((p=n.input||t&&t.input,d={hash:{value:"lat","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:t,"class":t},contexts:[],types:[],data:o},p?p.call(t,d):g.call(t,"input",d)))),o.buffer.push("/"),o.buffer.push(m((p=n.input||t&&t.input,d={hash:{value:"lng","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:t,"class":t},contexts:[],types:[],data:o},p?p.call(t,d):g.call(t,"input",d)))),o.buffer.push("</label>\n  <label>zoom: "),o.buffer.push(m((p=n.input||t&&t.input,d={hash:{value:"zoom"},hashTypes:{value:"ID"},hashContexts:{value:t},contexts:[],types:[],data:o},p?p.call(t,d):g.call(t,"input",d)))),o.buffer.push("</label>\n  <label>type: "),o.buffer.push(m(n.view.call(t,"select",{hash:{content:"mapTypes",optionLabelPath:"content.label",optionValuePath:"content.id",value:"type"},hashTypes:{content:"ID",optionLabelPath:"STRING",optionValuePath:"STRING",value:"ID"},hashContexts:{content:t,optionLabelPath:t,optionValuePath:t,value:t},contexts:[t],types:["STRING"],data:o}))),o.buffer.push('</label>\n</div>\n\n<h3>Markers</h3>\n<div>\n  <ul class="markers">\n    '),u=n.each.call(t,"markers",{hash:{},hashTypes:{},hashContexts:{},inverse:b.noop,fn:b.program(1,s,o),contexts:[t],types:["ID"],data:o}),(u||0===u)&&o.buffer.push(u),o.buffer.push("\n  </ul>\n  <button "),o.buffer.push(m(n.action.call(t,"addMarker",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["STRING"],data:o}))),o.buffer.push('>add</button>\n</div>\n\n<h3>Info windows</h3>\n<div>\n  <ul class="info-windows">\n    '),u=n.each.call(t,"infoWindows",{hash:{},hashTypes:{},hashContexts:{},inverse:b.noop,fn:b.program(3,i,o),contexts:[t],types:["ID"],data:o}),(u||0===u)&&o.buffer.push(u),o.buffer.push("\n  </ul>\n  <button "),o.buffer.push(m(n.action.call(t,"addInfoWindow",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["STRING"],data:o}))),o.buffer.push('>add</button>\n</div>\n\n<h3>Polylines</h3>\n<div>\n  <ul class="polylines">\n    '),u=n.each.call(t,"polylines",{hash:{},hashTypes:{},hashContexts:{},inverse:b.noop,fn:b.program(5,r,o),contexts:[t],types:["ID"],data:o}),(u||0===u)&&o.buffer.push(u),o.buffer.push("\n  </ul>\n  <button "),o.buffer.push(m(n.action.call(t,"addPolyline",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["STRING"],data:o}))),o.buffer.push('>add</button>\n</div>\n\n<h3>Circles</h3>\n<div>\n  <ul class="circles">\n    '),u=n.each.call(t,"circles",{hash:{},hashTypes:{},hashContexts:{},inverse:b.noop,fn:b.program(8,h,o),contexts:[t],types:["ID"],data:o}),(u||0===u)&&o.buffer.push(u),o.buffer.push("\n  </ul>\n  <button "),o.buffer.push(m(n.action.call(t,"addCircle",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["STRING"],data:o}))),o.buffer.push(">add</button>\n</div>\n"),f})}),define("dummy/templates/components/google-map",["ember","exports"],function(e,t){"use strict";var l=e["default"];t["default"]=l.Handlebars.template(function(e,t,n,a,o){function s(e,t){var l,a="";return t.buffer.push("\n      <li>"),l=n._triageMustache.call(e,"title",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push(" @ "),l=n._triageMustache.call(e,"lat",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push(","),l=n._triageMustache.call(e,"lng",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push("</li>\n      "),l=n["if"].call(e,"view.hasInfoWindow",{hash:{},hashTypes:{},hashContexts:{},inverse:u.noop,fn:u.program(2,i,t),contexts:[e],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push("\n    "),a}function i(e,t){var l="";return t.buffer.push("\n        "),t.buffer.push(h(n.view.call(e,"google-map/info-window",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["STRING"],data:t}))),t.buffer.push("\n      "),l}this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,l.Handlebars.helpers),o=o||{};var r,c="",h=this.escapeExpression,u=this;return o.buffer.push('<div class="map-canvas"></div>\n<div style="display: none;">\n  <ul>\n    '),r=n.each.call(t,"_markers",{hash:{itemView:"markerViewClass"},hashTypes:{itemView:"ID"},hashContexts:{itemView:t},inverse:u.noop,fn:u.program(1,s,o),contexts:[t],types:["ID"],data:o}),(r||0===r)&&o.buffer.push(r),o.buffer.push("\n  </ul>\n  <ul>\n    "),o.buffer.push(h(n.each.call(t,"_infoWindows",{hash:{itemView:"infoWindowViewClass"},hashTypes:{itemView:"ID"},hashContexts:{itemView:t},contexts:[t],types:["ID"],data:o}))),o.buffer.push("\n  </ul>\n  <ul>\n    "),o.buffer.push(h(n.each.call(t,"_polylines",{hash:{itemView:"polylineViewClass"},hashTypes:{itemView:"ID"},hashContexts:{itemView:t},contexts:[t],types:["ID"],data:o}))),o.buffer.push("\n  </ul>\n  <ul>\n    "),o.buffer.push(h(n.each.call(t,"_circles",{hash:{itemView:"circleViewClass"},hashTypes:{itemView:"ID"},hashContexts:{itemView:t},contexts:[t],types:["ID"],data:o}))),o.buffer.push("\n  </ul>\n</div>\n"),c})}),define("dummy/templates/google-map/info-window",["ember","exports"],function(e,t){"use strict";var l=e["default"];t["default"]=l.Handlebars.template(function(e,t,n,a,o){this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,l.Handlebars.helpers),o=o||{};var s,i="";return o.buffer.push("<h3>"),s=n._triageMustache.call(t,"title",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["ID"],data:o}),(s||0===s)&&o.buffer.push(s),o.buffer.push("</h3>\n\n<p>"),s=n._triageMustache.call(t,"description",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["ID"],data:o}),(s||0===s)&&o.buffer.push(s),o.buffer.push("</p>\n"),i})}),define("dummy/templates/google-map/polyline",["ember","exports"],function(e,t){"use strict";var l=e["default"];t["default"]=l.Handlebars.template(function(e,t,n,a,o){function s(e,t){var l,a="";return t.buffer.push("\n    <li>"),l=n._triageMustache.call(e,"lat",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push(","),l=n._triageMustache.call(e,"lng",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push("</li>\n  "),a}this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,l.Handlebars.helpers),o=o||{};var i,r="",c=this;return o.buffer.push("<ul>\n  "),i=n.each.call(t,"_path",{hash:{},hashTypes:{},hashContexts:{},inverse:c.noop,fn:c.program(1,s,o),contexts:[t],types:["ID"],data:o}),(i||0===i)&&o.buffer.push(i),o.buffer.push("\n</ul>\n"),r})}),define("dummy/templates/marker-info-window",["ember","exports"],function(e,t){"use strict";var l=e["default"];t["default"]=l.Handlebars.template(function(e,t,n,a,o){this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,l.Handlebars.helpers),o=o||{};var s,i="";return o.buffer.push('<div class="marker-info-window">\n  <h2>I am marker '),s=n._triageMustache.call(t,"title",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["ID"],data:o}),(s||0===s)&&o.buffer.push(s),o.buffer.push("</h2>\n\n  <div>\n    <div>my latitude: <code>"),s=n._triageMustache.call(t,"lat",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["ID"],data:o}),(s||0===s)&&o.buffer.push(s),o.buffer.push("</code></div>\n    <div>my longitude: <code>"),s=n._triageMustache.call(t,"lng",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["ID"],data:o}),(s||0===s)&&o.buffer.push(s),o.buffer.push("</code></div>\n  </div>\n  <h4>"),s=n._triageMustache.call(t,"helloWorld",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["ID"],data:o}),(s||0===s)&&o.buffer.push(s),o.buffer.push("</h4>\n</div>\n"),i})}),define("dummy/views/application",["ember","exports"],function(e,t){"use strict";var l=e["default"];t["default"]=l.View.extend({didInsertElement:function(){this.$("> h3").each(function(){var e=l.$(this);e.addClass("collapsed"),e.next().addClass("collapsed")})},click:function(e){if("H3"===e.target.tagName){var t=this.$(e.target);t.toggleClass("expanded").toggleClass("collapsed"),t.next().toggleClass("expanded").toggleClass("collapsed")}}})}),define("dummy/views/google-map/circle",["ember","ember-google-map/core/helpers","ember-google-map/mixins/google-object","exports"],function(e,t,l,n){"use strict";var a=e["default"],o=t["default"],s=l["default"],i=a.computed,r=i.alias,c=i.oneWay,h=a.on,u=a.View.extend(s,{googleProperties:{isClickable:{name:"clickable",optionOnly:!0},isVisible:{name:"visible",event:"visible_changed"},isDraggable:{name:"draggable",event:"draggable_changed"},isEditable:{name:"editable",event:"editable_changed"},radius:{event:"radius_changed",cast:o.cast.number},strokeColor:{optionOnly:!0},strokeOpacity:{optionOnly:!0,cast:o.cast.number},strokeWeight:{optionOnly:!0,cast:o.cast.number},fillColor:{optionOnly:!0},fillOpacity:{optionOnly:!0,cast:o.cast.number},zIndex:{cast:o.cast.integer,optionOnly:!0},map:{readOnly:!0},"lat,lng":{name:"center",event:"center_changed",toGoogle:o._latLngToGoogle,fromGoogle:o._latLngFromGoogle}},googleEvents:i("controller.googleEvents",function(e,t){var l=arguments,n=l;return n.length<2&&(t=a.merge({click:"handleCircleEvent",dblclick:"handleCircleEvent",drag:"handleCircleEvent",dragend:"handleCircleEvent",dragstart:"handleCircleEvent",mousedown:"handleCircleEvent",mouseout:"handleCircleEvent",mouseover:"handleCircleEvent",mouseup:"handleCircleEvent",rightclick:"handleCircleEvent"},this.get("controller.googleEvents")||{})),t}),radius:r("controller.radius"),zIndex:r("controller.zIndex"),isVisible:r("controller.isVisible"),isDraggable:r("controller.isDraggable"),isClickable:r("controller.isClickable"),isEditable:r("controller.isEditable"),strokeColor:r("controller.strokeColor"),strokeOpacity:r("controller.strokeOpacity"),strokeWeight:r("controller.strokeWeight"),fillColor:r("controller.fillColor"),fillOpacity:r("controller.fillOpacity"),lat:r("controller.lat"),lng:r("controller.lng"),map:c("parentView.map"),initGoogleCircle:h("didInsertElement",function(){var e;o.hasGoogleLib()&&!this.get("googleObject")&&(e=this.serializeGoogleOptions(),a.debug("[google-maps] creating new circle: %@".fmt(e)),this.set("googleObject",new google.maps.Circle(e)),this.synchronizeEmberObject())}),destroyGoogleCircle:a.on("willDestroyElement",function(){var e=this.get("googleObject");e&&(e.setMap(null),this.set("googleObject",null))}),actions:{handleCircleEvent:function(){var e=arguments,t=e,l=[].slice.call(t),n=this.get("lastGoogleEventName");a.warn("[google-map] unhandled circle event %@ with arguments %@".fmt(n,l.join(", ")))}}});n["default"]=u}),define("dummy/views/google-map/info-window",["ember","ember-google-map/core/helpers","ember-google-map/mixins/google-object","dummy/views/google-map/marker","exports"],function(e,t,l,n,a){"use strict";var o=e["default"],s=t["default"],i=l["default"],r=n["default"],c=o.computed,h=c.alias,u=c.oneWay,p=o.View.extend(i,{classNames:["google-info-window"],templateName:c("parentView.infoWindowTemplateName","controller.templateName",function(){return this.get("controller.templateName")||this.get("parentView.infoWindowTemplateName")}).readOnly(),googleProperties:{zIndex:{event:"zindex_changed",cast:s.cast.integer},map:{readOnly:!0},"lat,lng":{name:"position",event:"position_changed",toGoogle:s._latLngToGoogle,fromGoogle:s._latLngFromGoogle}},googleEvents:c("controller.googleEvents",function(e,t){var l=arguments,n=l;return n.length<2&&(t=o.merge({closeclick:"handleInfoWindowEvent",domready:"handleInfoWindowEvent"},this.get("controller.googleEvents")||{})),t}),zIndex:h("controller.zIndex"),lat:h("controller.lat"),lng:h("controller.lng"),anchor:u("parentView.infoWindowAnchor"),visible:c("parentView.isInfoWindowVisible","controller.isVisible",function(e,t){var l=arguments,n=l;return n.length<2?this.get("parentView")instanceof r?t=this.get("parentView.isInfoWindowVisible"):(t=this.getWithDefault("controller.isVisible",!0),this.set("controller.isVisible",t)):this.get("parentView")instanceof r?this.set("parentView.isInfoWindowVisible",t):this.set("controller.isVisible",t),t}),map:u("parentView.map"),initGoogleInfoWindow:o.on("didInsertElement",function(){o.run.schedule("afterRender",this,"_initGoogleInfoWindow")}),handleInfoWindowVisibility:o.observer("visible",function(){if(!this._changingVisible){var e=this.get("googleObject");e&&(this.get("visible")?e.open(this.get("map"),this.get("anchor")||void 0):e.close())}}),_initGoogleInfoWindow:function(){var e,t;s.hasGoogleLib()&&!this.get("googleObject")&&(e=this.serializeGoogleOptions(),e.content=this._backupViewElement(),o.debug("[google-maps] creating new info-window: %@, anchor: %@".fmt(e,t)),this.set("googleObject",new google.maps.InfoWindow(e)),this.synchronizeEmberObject(),this.handleInfoWindowVisibility())},destroyGoogleInfoWindow:o.on("willDestroyElement",function(){var e=this.get("googleObject");e&&(this._changingVisible=!0,e.close(),e.setMap(null),this._restoreViewElement(),this.set("googleObject",null),this._changingVisible=!1)}),_backupViewElement:function(){var e=this.get("element");return this._placeholderElement||(this._placeholderElement=document.createElement(e.nodeName),e.parentNode.replaceChild(this._placeholderElement,e)),e},_restoreViewElement:function(){var e=this.get("element");return this._placeholderElement&&(this._placeholderElement.parentNode.replaceChild(e,this._placeholderElement),this._placeholderElement=null),e},actions:{handleInfoWindowEvent:function(){var e=arguments,t=e,l=[].slice.call(t),n=this.get("lastGoogleEventName");"closeclick"===n?(this._changingVisible=!0,this.set("visible",!1),this._changingVisible=!1):o.warn("[google-map] unhandled info-window event %@ with arguments %@".fmt(n,l.join(", ")))}}});a["default"]=p}),define("dummy/views/google-map/marker",["ember","ember-google-map/core/helpers","ember-google-map/mixins/google-object","exports"],function(e,t,l,n){"use strict";var a=e["default"],o=t["default"],s=l["default"],i=a.computed,r=i.alias,c=i.oneWay,h=a.View.extend(s,{googleProperties:{isClickable:{name:"clickable",event:"clickable_changed"},isVisible:{name:"visible",event:"visible_changed"},isDraggable:{name:"draggable",event:"draggable_changed"},title:{event:"title_changed"},opacity:{cast:o.cast.number},icon:{event:"icon_changed"},zIndex:{event:"zindex_changed",cast:o.cast.integer},map:{readOnly:!0},"lat,lng":{name:"position",event:"position_changed",toGoogle:o._latLngToGoogle,fromGoogle:o._latLngFromGoogle}},googleEvents:i("controller.googleEvents",function(e,t){var l=arguments,n=l;return n.length<2&&(t=a.merge({click:"handleMarkerEvent",dblclick:"handleMarkerEvent",drag:"handleMarkerEvent",dragend:"handleMarkerEvent",dragstart:"handleMarkerEvent",mousedown:"handleMarkerEvent",mouseout:"handleMarkerEvent",mouseover:"handleMarkerEvent",mouseup:"handleMarkerEvent",rightclick:"handleMarkerEvent"},this.get("controller.googleEvents")||{})),t}),title:r("controller.title"),opacity:r("controller.opacity"),zIndex:r("controller.zIndex"),isVisible:r("controller.isVisible"),isDraggable:r("controller.isDraggable"),isClickable:r("controller.isClickable"),icon:r("controller.icon"),lat:r("controller.lat"),lng:r("controller.lng"),infoWindowTemplateName:i("controller.infoWindowTemplateName","parentView.markerInfoWindowTemplateName",function(){return this.get("controller.infoWindowTemplateName")||this.get("parentView.markerInfoWindowTemplateName")}).readOnly(),infoWindowAnchor:c("googleObject"),isInfoWindowVisible:r("controller.isInfoWindowVisible"),hasInfoWindow:i("parentView.markerHasInfoWindow","controller.hasInfoWindow",function(){var e=this.get("controller.hasInfoWindow");
return null===e||void 0===e?!!this.get("parentView.markerHasInfoWindow"):e}).readOnly(),map:c("parentView.map"),initGoogleMarker:a.on("didInsertElement",function(){var e;o.hasGoogleLib()&&!this.get("googleObject")&&(e=this.serializeGoogleOptions(),a.debug("[google-maps] creating new marker: %@".fmt(e)),this.set("googleObject",new google.maps.Marker(e)),this.synchronizeEmberObject())}),destroyGoogleMarker:a.on("willDestroyElement",function(){var e=this.get("googleObject");e&&(e.setMap(null),this.set("googleObject",null))}),actions:{handleMarkerEvent:function(){var e=arguments,t=e,l=[].slice.call(t),n=this.get("lastGoogleEventName");"click"===n?this.set("isInfoWindowVisible",!0):a.warn("[google-map] unhandled marker event %@ with arguments %@".fmt(n,l.join(", ")))}}});n["default"]=h}),define("dummy/views/google-map/polyline",["ember","ember-google-map/core/helpers","ember-google-map/mixins/google-object","exports"],function(e,t,l,n){"use strict";var a=e["default"],o=t["default"],s=l["default"],i=a.computed.alias,r=a.computed.oneWay,c=a.View.extend(s,{templateName:"google-map/polyline",googleProperties:{isClickable:{name:"clickable",optionOnly:!0},isVisible:{name:"visible",event:"visible_changed"},isDraggable:{name:"draggable",event:"draggable_changed"},isEditable:{name:"editable",event:"editable_changed"},isGeodesic:{name:"geodesic",optionOnly:!0},icons:{optionOnly:!0},zIndex:{optionOnly:!0,cast:o.cast.integer},map:{readOnly:!0},strokeColor:{optionOnly:!0},strokeWeight:{optionOnly:!0,cast:o.cast.number},strokeOpacity:{optionOnly:!0,cast:o.cast.number}},googleEvents:a.computed("controller.googleEvents",function(e,t){var l=arguments,n=l;return n.length<2&&(t=a.merge({click:"handlePolylineEvent",dblclick:"handlePolylineEvent",drag:"handlePolylineEvent",dragend:"handlePolylineEvent",dragstart:"handlePolylineEvent",mousedown:"handlePolylineEvent",mouseout:"handlePolylineEvent",mouseover:"handlePolylineEvent",mouseup:"handlePolylineEvent",rightclick:"handlePolylineEvent"},this.get("controller.googleEvents")||{})),t}),strokeColor:i("controller.strokeColor"),strokeWeight:i("controller.strokeWeight"),strokeOpacity:i("controller.strokeOpacity"),zIndex:i("controller.zIndex"),isVisible:i("controller.isVisible"),isDraggable:i("controller.isDraggable"),isClickable:i("controller.isClickable"),isEditable:i("controller.isEditable"),icons:i("controller.icons"),map:r("parentView.map"),initGooglePolyline:a.on("didInsertElement",function(){var e;o.hasGoogleLib()&&!this.get("googleObject")&&(e=this.serializeGoogleOptions(),e.path=this.get("controller._path.googleArray"),a.debug("[google-maps] creating new polyline: %@".fmt(e)),this.set("googleObject",new google.maps.Polyline(e)),this.synchronizeEmberObject())}),destroyGooglePolyline:a.on("willDestroyElement",function(){var e=this.get("googleObject");e&&(e.setMap(null),this.set("googleObject",null))}),actions:{handlePolylineEvent:function(){var e=arguments,t=e,l=[].slice.call(t),n=this.get("lastGoogleEventName");a.warn("[google-map] unhandled polyline event %@ with arguments %@".fmt(n,l.join(", ")))}}});n["default"]=c}),define("dummy/config/environment",["ember"],function(e){var t="dummy";try{var l=t+"/config/environment",n=e["default"].$('meta[name="'+l+'"]').attr("content"),a=JSON.parse(unescape(n));return{"default":a}}catch(o){throw new Error('Could not read config from meta tag with name "'+l+'".')}}),runningTests?require("dummy/tests/test-helper"):require("dummy/app")["default"].create({});