define("dummy/app",["ember","ember/resolver","ember/load-initializers","dummy/config/environment","exports"],function(e,t,n,o,l){"use strict";var a=e["default"],s=t["default"],r=n["default"],i=o["default"];a.MODEL_FACTORY_INJECTIONS=!0;var h=a.Application.extend({rootElement:"#application",modulePrefix:i.modulePrefix,podModulePrefix:i.podModulePrefix,Resolver:s});r(h,i.modulePrefix),l["default"]=h}),define("dummy/components/google-map",["ember","ember-google-map/core/helpers","ember-google-map/mixins/google-object","exports"],function(e,t,n,o){"use strict";function l(e){return a.Object.create(e)}var a=e["default"],s=t["default"],r=n["default"],i=a.A([l({id:"road",label:"road"}),l({id:"satellite",label:"satellite"}),l({id:"terrain",label:"terrain"}),l({id:"hybrid",label:"hybrid"})]);o.MAP_TYPES=i;var h=a.A([l({id:s.PLACE_TYPE_ADDRESS,label:"address"}),l({id:s.PLACE_TYPE_LOCALITY,label:"locality"}),l({id:s.PLACE_TYPE_ADMIN_REGION,label:"administrative region"}),l({id:s.PLACE_TYPE_BUSINESS,label:"business"})]);o.PLACE_TYPES=h;var u=a.Component.extend(r,{classNames:["google-map"],googleProperties:{zoom:{event:"zoom_changed",cast:s.cast.integer},type:{name:"mapTypeId",event:"maptypeid_changed",toGoogle:s._typeToGoogle,fromGoogle:s._typeFromGoogle},"lat,lng":{name:"center",event:"center_changed",toGoogle:s._latLngToGoogle,fromGoogle:s._latLngFromGoogle}},googleObject:null,lat:0,lng:0,zoom:5,type:"road",markers:null,_markers:a.computed(function(){return this.container.lookupFactory("controller:google-map/markers").create({parentController:this})}).readOnly(),markerController:"google-map/marker",markerViewClass:"google-map/marker",markerInfoWindowTemplateName:"google-map/info-window",markerHasInfoWindow:!0,polylines:null,_polylines:a.computed(function(){return this.container.lookupFactory("controller:google-map/polylines").create({parentController:this})}).readOnly(),polylineController:"google-map/polyline",polylinePathController:"google-map/polyline-path",polylineViewClass:"google-map/polyline",infoWindows:null,_infoWindows:a.computed(function(){return this.container.lookupFactory("controller:google-map/info-windows").create({parentController:this})}).readOnly(),infoWindowController:"google-map/info-window",infoWindowViewClass:"google-map/info-window",infoWindowTemplateName:"google-map/info-window",map:a.computed.oneWay("googleObject"),initGoogleMap:a.on("didInsertElement",function(){var e,t,n;this.destroyGoogleMap(),s.hasGoogleLib()&&(e=this.$("div.map-canvas")[0],t=this.serializeGoogleOptions(),a.debug("[google-map] creating map with options: %@".fmt(t)),n=new google.maps.Map(e,t),this.set("googleObject",n),this.synchronizeEmberObject())}),destroyGoogleMap:a.on("willDestroyElement",function(){this.get("googleObject")&&(a.debug("[google-map] destroying map"),this.set("googleObject",null))})});o["default"]=u}),define("dummy/controllers/application",["ember","dummy/components/google-map","exports"],function(e,t,n){"use strict";var o=e["default"],l=t.MAP_TYPES;n["default"]=o.Controller.extend({lat:0,lng:0,zoom:5,type:"road",mapTypes:l,markers:[{title:"one",lat:5,lng:5,description:"hello 1",isDraggable:!0},{title:"two",lat:5,lng:0,hasInfoWindow:!1},{title:"three",lat:0,lng:5,infoWindowTemplateName:"marker-info-window",helloWorld:"Hello World!"}],infoWindows:[{title:"some info window",lat:-5,lng:-5,description:"hello everybody!"}],polylines:[{isEditable:!0,path:[{lat:2.8,lng:-3.6},{lat:1.5,lng:.2},{lat:-3,lng:2},{lat:-5.5,lng:-.8},{lat:-5.9,lng:-8.9},{lat:-3.4,lng:-11.6},{lat:1.2,lng:-11.1},{lat:2.8,lng:-7}],strokeOpacity:.8,strokeColor:"blue"}],actions:{addMarker:function(){this.get("markers").addObject({title:"new",lat:0,lng:0,isDraggable:!0})},removeMarker:function(e){this.get("markers").removeObject(e)},addInfoWindow:function(){this.get("infoWindows").addObject({title:"new iw",description:"hello",lat:-5,lng:0})},removeInfoWindow:function(e){this.get("infoWindows").removeObject(e)},addPolyline:function(){this.get("polylines").addObject({isEditable:!1,path:[{lat:0,lng:0},{lat:1,lng:0}]})},removePolyline:function(e){this.get("polylines").removeObject(e)},addPolylinePathItem:function(e){e.addObject({lat:1,lng:1})},removePolylinePathItem:function(e,t){e.removeObject(t)}}})}),define("dummy/controllers/google-map/info-window",["ember","exports"],function(e,t){"use strict";var n=e["default"];t["default"]=n.ObjectController.extend({})}),define("dummy/controllers/google-map/info-windows",["ember","exports"],function(e,t){"use strict";var n=e["default"];t["default"]=n.ArrayController.extend({itemController:n.computed.alias("parentController.infoWindowController"),model:n.computed.alias("parentController.infoWindows")})}),define("dummy/controllers/google-map/marker",["ember","exports"],function(e,t){"use strict";var n=e["default"];t["default"]=n.ObjectController.extend({})}),define("dummy/controllers/google-map/markers",["ember","exports"],function(e,t){"use strict";var n=e["default"];t["default"]=n.ArrayController.extend({itemController:n.computed.alias("parentController.markerController"),model:n.computed.alias("parentController.markers")})}),define("dummy/controllers/google-map/polyline-path",["ember","ember-google-map/mixins/google-array","ember-google-map/core/helpers","exports"],function(e,t,n,o){"use strict";var l=e["default"],a=t["default"],s=n["default"];o["default"]=l.ArrayController.extend(a,{model:l.computed.alias("parentController.path"),googleItemFactory:s._latLngToGoogle,emberItemFactory:function(e){return l.Object.create(s._latLngFromGoogle(e))},observeEmberProperties:["lat","lng"]})}),define("dummy/controllers/google-map/polyline",["ember","exports"],function(e,t){"use strict";var n=e["default"];t["default"]=n.ObjectController.extend({pathController:n.computed.alias("parentController.pathController"),_path:n.computed("path","pathController",function(){return this.container.lookupFactory("controller:"+this.get("pathController")).create({parentController:this})}).readOnly()})}),define("dummy/controllers/google-map/polylines",["ember","exports"],function(e,t){"use strict";var n=e["default"];t["default"]=n.ArrayController.extend({itemController:n.computed.alias("parentController.polylineController"),model:n.computed.alias("parentController.polylines"),pathController:n.computed.alias("parentController.polylinePathController")})}),define("dummy/initializers/export-application-global",["ember","dummy/config/environment","exports"],function(e,t,n){"use strict";function o(e,t){var n=l.String.classify(a.modulePrefix);a.exportApplicationGlobal&&(window[n]=t)}var l=e["default"],a=t["default"];n.initialize=o,n["default"]={name:"export-application-global",initialize:o}}),define("dummy/router",["ember","dummy/config/environment","exports"],function(e,t,n){"use strict";var o=e["default"],l=t["default"],a=o.Router.extend({location:l.locationType});a.map(function(){}),n["default"]=a}),define("dummy/templates/application",["ember","exports"],function(e,t){"use strict";var n=e["default"];t["default"]=n.Handlebars.template(function(e,t,o,l,a){function s(e,t){var n,l,a="";return t.buffer.push("\n    <li>\n      <label>title: "),t.buffer.push(g((n=o.input||e&&e.input,l={hash:{value:"title"},hashTypes:{value:"ID"},hashContexts:{value:e},contexts:[],types:[],data:t},n?n.call(e,l):f.call(e,"input",l)))),t.buffer.push("</label>\n      <label>desc.: "),t.buffer.push(g((n=o.input||e&&e.input,l={hash:{value:"description"},hashTypes:{value:"ID"},hashContexts:{value:e},contexts:[],types:[],data:t},n?n.call(e,l):f.call(e,"input",l)))),t.buffer.push("</label>\n      <label>lat/lng: "),t.buffer.push(g((n=o.input||e&&e.input,l={hash:{value:"lat","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:e,"class":e},contexts:[],types:[],data:t},n?n.call(e,l):f.call(e,"input",l)))),t.buffer.push("/"),t.buffer.push(g((n=o.input||e&&e.input,l={hash:{value:"lng","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:e,"class":e},contexts:[],types:[],data:t},n?n.call(e,l):f.call(e,"input",l)))),t.buffer.push("</label>\n      <label>"),t.buffer.push(g((n=o.input||e&&e.input,l={hash:{type:"checkbox",checked:"isVisible"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},contexts:[],types:[],data:t},n?n.call(e,l):f.call(e,"input",l)))),t.buffer.push("visible</label> |\n      <label>"),t.buffer.push(g((n=o.input||e&&e.input,l={hash:{type:"checkbox",checked:"isDraggable"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},contexts:[],types:[],data:t},n?n.call(e,l):f.call(e,"input",l)))),t.buffer.push("draggable</label>\n      <button "),t.buffer.push(g(o.action.call(e,"removeMarker","",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e],types:["STRING","ID"],data:t}))),t.buffer.push(">x</button>\n    </li>\n  "),a}function r(e,t){var n,l,a="";return t.buffer.push("\n    <li>\n      <label>title: "),t.buffer.push(g((n=o.input||e&&e.input,l={hash:{value:"title"},hashTypes:{value:"ID"},hashContexts:{value:e},contexts:[],types:[],data:t},n?n.call(e,l):f.call(e,"input",l)))),t.buffer.push("</label>\n      <label>desc.: "),t.buffer.push(g((n=o.input||e&&e.input,l={hash:{value:"description"},hashTypes:{value:"ID"},hashContexts:{value:e},contexts:[],types:[],data:t},n?n.call(e,l):f.call(e,"input",l)))),t.buffer.push("</label>\n      <label>lat/lng: "),t.buffer.push(g((n=o.input||e&&e.input,l={hash:{value:"lat","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:e,"class":e},contexts:[],types:[],data:t},n?n.call(e,l):f.call(e,"input",l)))),t.buffer.push("/"),t.buffer.push(g((n=o.input||e&&e.input,l={hash:{value:"lng","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:e,"class":e},contexts:[],types:[],data:t},n?n.call(e,l):f.call(e,"input",l)))),t.buffer.push("</label>\n      <label>"),t.buffer.push(g((n=o.input||e&&e.input,l={hash:{type:"checkbox",checked:"isVisible"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},contexts:[],types:[],data:t},n?n.call(e,l):f.call(e,"input",l)))),t.buffer.push("visible</label>\n      <button "),t.buffer.push(g(o.action.call(e,"removeInfoWindow","",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e],types:["STRING","ID"],data:t}))),t.buffer.push(">x</button>\n    </li>\n  "),a}function i(e,t){var n,l,a,s="";return t.buffer.push("\n    <li>\n      <label>"),t.buffer.push(g((l=o.input||e&&e.input,a={hash:{type:"checkbox",checked:"isVisible"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},contexts:[],types:[],data:t},l?l.call(e,a):f.call(e,"input",a)))),t.buffer.push("visible</label> |\n      <label>"),t.buffer.push(g((l=o.input||e&&e.input,a={hash:{type:"checkbox",checked:"isDraggable"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},contexts:[],types:[],data:t},l?l.call(e,a):f.call(e,"input",a)))),t.buffer.push("draggable</label>\n      <label>"),t.buffer.push(g((l=o.input||e&&e.input,a={hash:{type:"checkbox",checked:"isEditable"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:e,checked:e},contexts:[],types:[],data:t},l?l.call(e,a):f.call(e,"input",a)))),t.buffer.push("editable</label>\n      <button "),t.buffer.push(g(o.action.call(e,"removePolyline","",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e],types:["STRING","ID"],data:t}))),t.buffer.push('>x</button>\n      <ul class="plyline-path">\n        '),n=o.each.call(e,"entry","in","path",{hash:{},hashTypes:{},hashContexts:{},inverse:m.noop,fn:m.program(6,h,t),contexts:[e,e,e],types:["ID","ID","ID"],data:t}),(n||0===n)&&t.buffer.push(n),t.buffer.push("\n      </ul>\n      <button "),t.buffer.push(g(o.action.call(e,"addPolylinePathItem","path",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e],types:["STRING","ID"],data:t}))),t.buffer.push(">add</button>\n    </li>\n  "),s}function h(e,t){var n,l,a="";return t.buffer.push("\n          <li>\n          <label>lat/lng: "),t.buffer.push(g((n=o.input||e&&e.input,l={hash:{value:"entry.lat","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:e,"class":e},contexts:[],types:[],data:t},n?n.call(e,l):f.call(e,"input",l)))),t.buffer.push("/"),t.buffer.push(g((n=o.input||e&&e.input,l={hash:{value:"entry.lng","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:e,"class":e},contexts:[],types:[],data:t},n?n.call(e,l):f.call(e,"input",l)))),t.buffer.push("</label>\n            <button "),t.buffer.push(g(o.action.call(e,"removePolylinePathItem","path","entry",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e,e],types:["STRING","ID","ID"],data:t}))),t.buffer.push(">x</button>\n          </li>\n        "),a}this.compilerInfo=[4,">= 1.0.0"],o=this.merge(o,n.Handlebars.helpers),a=a||{};var u,p,c,d="",f=o.helperMissing,g=this.escapeExpression,m=this;return a.buffer.push('<h2 id="title">\n  Dead simple example of using <a href="https://github.com/huafu/ember-google-map">ember-google-map</a>\n</h2>\n\n'),a.buffer.push(g((p=o["google-map"]||t&&t["google-map"],c={hash:{lat:"lat",lng:"lng",type:"type",zoom:"zoom",markers:"markers",infoWindows:"infoWindows",markerInfoWindowTemplateName:"marker-info-window",polylines:"polylines",gopt_mapTypeControl:!1,gopt_backgroundColor:"transparent"},hashTypes:{lat:"ID",lng:"ID",type:"ID",zoom:"ID",markers:"ID",infoWindows:"ID",markerInfoWindowTemplateName:"STRING",polylines:"ID",gopt_mapTypeControl:"BOOLEAN",gopt_backgroundColor:"STRING"},hashContexts:{lat:t,lng:t,type:t,zoom:t,markers:t,infoWindows:t,markerInfoWindowTemplateName:t,polylines:t,gopt_mapTypeControl:t,gopt_backgroundColor:t},contexts:[],types:[],data:a},p?p.call(t,c):f.call(t,"google-map",c)))),a.buffer.push("\n\n<h3>Map settings</h3>\n<div>\n  <label>center lat/lng: "),a.buffer.push(g((p=o.input||t&&t.input,c={hash:{value:"lat","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:t,"class":t},contexts:[],types:[],data:a},p?p.call(t,c):f.call(t,"input",c)))),a.buffer.push("/"),a.buffer.push(g((p=o.input||t&&t.input,c={hash:{value:"lng","class":"coord"},hashTypes:{value:"ID","class":"STRING"},hashContexts:{value:t,"class":t},contexts:[],types:[],data:a},p?p.call(t,c):f.call(t,"input",c)))),a.buffer.push("</label>\n  <label>zoom: "),a.buffer.push(g((p=o.input||t&&t.input,c={hash:{value:"zoom"},hashTypes:{value:"ID"},hashContexts:{value:t},contexts:[],types:[],data:a},p?p.call(t,c):f.call(t,"input",c)))),a.buffer.push("</label>\n  <label>type: "),a.buffer.push(g(o.view.call(t,"select",{hash:{content:"mapTypes",optionLabelPath:"content.label",optionValuePath:"content.id",value:"type"},hashTypes:{content:"ID",optionLabelPath:"STRING",optionValuePath:"STRING",value:"ID"},hashContexts:{content:t,optionLabelPath:t,optionValuePath:t,value:t},contexts:[t],types:["STRING"],data:a}))),a.buffer.push('</label>\n</div>\n<h3>Markers</h3>\n<ul class="markers">\n  '),u=o.each.call(t,"markers",{hash:{},hashTypes:{},hashContexts:{},inverse:m.noop,fn:m.program(1,s,a),contexts:[t],types:["ID"],data:a}),(u||0===u)&&a.buffer.push(u),a.buffer.push("\n</ul>\n<button "),a.buffer.push(g(o.action.call(t,"addMarker",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["STRING"],data:a}))),a.buffer.push('>add</button>\n\n<h3>Info windows</h3>\n<ul class="info-windows">\n  '),u=o.each.call(t,"infoWindows",{hash:{},hashTypes:{},hashContexts:{},inverse:m.noop,fn:m.program(3,r,a),contexts:[t],types:["ID"],data:a}),(u||0===u)&&a.buffer.push(u),a.buffer.push("\n</ul>\n<button "),a.buffer.push(g(o.action.call(t,"addInfoWindow",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["STRING"],data:a}))),a.buffer.push('>add</button>\n\n<h3>Polylines</h3>\n<ul class="polylines">\n  '),u=o.each.call(t,"polylines",{hash:{},hashTypes:{},hashContexts:{},inverse:m.noop,fn:m.program(5,i,a),contexts:[t],types:["ID"],data:a}),(u||0===u)&&a.buffer.push(u),a.buffer.push("\n</ul>\n<button "),a.buffer.push(g(o.action.call(t,"addPolyline",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["STRING"],data:a}))),a.buffer.push(">add</button>\n"),d})}),define("dummy/templates/components/google-map",["ember","exports"],function(e,t){"use strict";var n=e["default"];t["default"]=n.Handlebars.template(function(e,t,o,l,a){function s(e,t){var n,l="";return t.buffer.push("\n      <li>"),n=o._triageMustache.call(e,"title",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(n||0===n)&&t.buffer.push(n),t.buffer.push(" @ "),n=o._triageMustache.call(e,"lat",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(n||0===n)&&t.buffer.push(n),t.buffer.push(","),n=o._triageMustache.call(e,"lng",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(n||0===n)&&t.buffer.push(n),t.buffer.push("</li>\n      "),n=o["if"].call(e,"view.hasInfoWindow",{hash:{},hashTypes:{},hashContexts:{},inverse:p.noop,fn:p.program(2,r,t),contexts:[e],types:["ID"],data:t}),(n||0===n)&&t.buffer.push(n),t.buffer.push("\n    "),l}function r(e,t){var n="";return t.buffer.push("\n        "),t.buffer.push(u(o.view.call(e,"google-map/info-window",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["STRING"],data:t}))),t.buffer.push("\n      "),n}this.compilerInfo=[4,">= 1.0.0"],o=this.merge(o,n.Handlebars.helpers),a=a||{};var i,h="",u=this.escapeExpression,p=this;return a.buffer.push('<div class="map-canvas"></div>\n<div style="display: none;">\n  <ul>\n    '),i=o.each.call(t,"_markers",{hash:{itemView:"markerViewClass"},hashTypes:{itemView:"ID"},hashContexts:{itemView:t},inverse:p.noop,fn:p.program(1,s,a),contexts:[t],types:["ID"],data:a}),(i||0===i)&&a.buffer.push(i),a.buffer.push("\n  </ul>\n  <ul>\n    "),a.buffer.push(u(o.each.call(t,"_infoWindows",{hash:{itemView:"infoWindowViewClass"},hashTypes:{itemView:"ID"},hashContexts:{itemView:t},contexts:[t],types:["ID"],data:a}))),a.buffer.push("\n  </ul>\n  <ul>\n    "),a.buffer.push(u(o.each.call(t,"_polylines",{hash:{itemView:"polylineViewClass"},hashTypes:{itemView:"ID"},hashContexts:{itemView:t},contexts:[t],types:["ID"],data:a}))),a.buffer.push("\n  </ul>\n</div>\n"),h})}),define("dummy/templates/google-map/info-window",["ember","exports"],function(e,t){"use strict";var n=e["default"];t["default"]=n.Handlebars.template(function(e,t,o,l,a){this.compilerInfo=[4,">= 1.0.0"],o=this.merge(o,n.Handlebars.helpers),a=a||{};var s,r="";return a.buffer.push("<h3>"),s=o._triageMustache.call(t,"title",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["ID"],data:a}),(s||0===s)&&a.buffer.push(s),a.buffer.push("</h3>\n\n<p>"),s=o._triageMustache.call(t,"description",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["ID"],data:a}),(s||0===s)&&a.buffer.push(s),a.buffer.push("</p>\n"),r})}),define("dummy/templates/google-map/polyline",["ember","exports"],function(e,t){"use strict";var n=e["default"];t["default"]=n.Handlebars.template(function(e,t,o,l,a){function s(e,t){var n,l="";return t.buffer.push("\n    <li>"),n=o._triageMustache.call(e,"lat",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(n||0===n)&&t.buffer.push(n),t.buffer.push(","),n=o._triageMustache.call(e,"lng",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(n||0===n)&&t.buffer.push(n),t.buffer.push("</li>\n  "),l}this.compilerInfo=[4,">= 1.0.0"],o=this.merge(o,n.Handlebars.helpers),a=a||{};var r,i="",h=this;return a.buffer.push("<ul>\n  "),r=o.each.call(t,"_path",{hash:{},hashTypes:{},hashContexts:{},inverse:h.noop,fn:h.program(1,s,a),contexts:[t],types:["ID"],data:a}),(r||0===r)&&a.buffer.push(r),a.buffer.push("\n</ul>\n"),i})}),define("dummy/templates/marker-info-window",["ember","exports"],function(e,t){"use strict";var n=e["default"];t["default"]=n.Handlebars.template(function(e,t,o,l,a){this.compilerInfo=[4,">= 1.0.0"],o=this.merge(o,n.Handlebars.helpers),a=a||{};var s,r="";return a.buffer.push("<h2>I am marker "),s=o._triageMustache.call(t,"title",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["ID"],data:a}),(s||0===s)&&a.buffer.push(s),a.buffer.push("</h2>\n<div>\n  I have latitude <code>"),s=o._triageMustache.call(t,"lat",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["ID"],data:a}),(s||0===s)&&a.buffer.push(s),a.buffer.push("</code>\n  and longitude <code>"),s=o._triageMustache.call(t,"lng",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["ID"],data:a}),(s||0===s)&&a.buffer.push(s),a.buffer.push("</code>.\n</div>\n<h4>"),s=o._triageMustache.call(t,"helloWorld",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["ID"],data:a}),(s||0===s)&&a.buffer.push(s),a.buffer.push("</h4>\n"),r})}),define("dummy/views/google-map/info-window",["ember","ember-google-map/core/helpers","ember-google-map/mixins/google-object","dummy/views/google-map/marker","exports"],function(e,t,n,o,l){"use strict";var a=e["default"],s=t["default"],r=n["default"],i=o["default"],h=a.View.extend(r,{templateName:a.computed("parentView.infoWindowTemplateName","controller.templateName",function(){return this.get("controller.templateName")||this.get("parentView.infoWindowTemplateName")}).readOnly(),googleProperties:{zIndex:{event:"zindex_changed",cast:s.cast.integer},map:{readOnly:!0},"element.outerHTML":{name:"content",readOnly:!0},"lat,lng":{name:"position",event:"position_changed",toGoogle:s._latLngToGoogle,fromGoogle:s._latLngFromGoogle}},googleEvents:a.computed("controller.googleEvents",function(e,t){var n=arguments,o=n;return o.length<2&&(t=a.merge({closeclick:"handleInfoWindowEvent",domready:"handleInfoWindowEvent"},this.get("controller.googleEvents")||{})),t}),zIndex:a.computed.alias("controller.zIndex"),lat:a.computed.alias("controller.lat"),lng:a.computed.alias("controller.lng"),anchor:a.computed.oneWay("parentView.infoWindowAnchor"),visible:a.computed("parentView.isInfoWindowVisible","controller.isVisible",function(e,t){var n=arguments,o=n;return o.length<2?this.get("parentView")instanceof i?t=this.get("parentView.isInfoWindowVisible"):(t=this.getWithDefault("controller.isVisible",!0),this.set("controller.isVisible",t)):this.get("parentView")instanceof i?this.set("parentView.isInfoWindowVisible",t):this.set("controller.isVisible",t),t}),map:a.computed.oneWay("parentView.map"),initGoogleInfoWindow:a.on("didInsertElement",function(){a.run.schedule("afterRender",this,"_initGoogleInfoWindow")}),handleInfoWindowVisibility:a.observer("visible",function(){if(!this._changingVisible){var e=this.get("googleObject");e&&(this.get("visible")?(e.open(this.get("map"),this.get("anchor")||void 0),this.notifyPropertyChange("element.outerHTML")):e.close())}}),_initGoogleInfoWindow:function(){var e,t;s.hasGoogleLib()&&!this.get("googleObject")&&(e=this.serializeGoogleOptions(),a.debug("[google-maps] creating new info-window: %@, anchor: %@".fmt(e,t)),this.set("googleObject",new google.maps.InfoWindow(e)),this.synchronizeEmberObject(),this.handleInfoWindowVisibility())},refreshInfoWindow:a.on("willClearRender",function(){a.run.scheduleOnce("afterRender",this,"notifyPropertyChange","element.outerHTML")}),destroyGoogleInfoWindow:a.on("willDestroyElement",function(){var e=this.get("googleObject");e&&(this._changingVisible=!0,e.close(),e.setMap(null),this.set("googleObject",null),this._changingVisible=!1)}),actions:{handleInfoWindowEvent:function(){var e=arguments,t=e,n=[].slice.call(t),o=this.get("lastGoogleEventName");"closeclick"===o?(this._changingVisible=!0,this.set("visible",!1),this._changingVisible=!1):a.warn("[google-map] unhandled info-window event %@ with arguments %@".fmt(o,n.join(", ")))}}});l["default"]=h}),define("dummy/views/google-map/marker",["ember","ember-google-map/core/helpers","ember-google-map/mixins/google-object","exports"],function(e,t,n,o){"use strict";var l=e["default"],a=t["default"],s=n["default"],r=l.computed.alias,i=l.computed.oneWay,h=l.View.extend(s,{googleProperties:{isClickable:{name:"clickable",event:"clickable_changed"},isVisible:{name:"visible",event:"visible_changed"},isDraggable:{name:"draggable",event:"draggable_changed"},title:{event:"title_changed"},opacity:{cast:a.cast.number},icon:{event:"icon_changed"},zIndex:{event:"zindex_changed",cast:a.cast.integer},map:{readOnly:!0},"lat,lng":{name:"position",event:"position_changed",toGoogle:a._latLngToGoogle,fromGoogle:a._latLngFromGoogle}},googleEvents:l.computed("controller.googleEvents",function(e,t){var n=arguments,o=n;return o.length<2&&(t=l.merge({click:"handleMarkerEvent",dblclick:"handleMarkerEvent",drag:"handleMarkerEvent",dragend:"handleMarkerEvent",dragstart:"handleMarkerEvent",mousedown:"handleMarkerEvent",mouseout:"handleMarkerEvent",mouseover:"handleMarkerEvent",mouseup:"handleMarkerEvent",rightclick:"handleMarkerEvent"},this.get("controller.googleEvents")||{})),t}),title:r("controller.title"),opacity:r("controller.opacity"),zIndex:r("controller.zIndex"),isVisible:r("controller.isVisible"),isDraggable:r("controller.isDraggable"),isClickable:r("controller.isClickable"),icon:r("controller.icon"),lat:r("controller.lat"),lng:r("controller.lng"),infoWindowTemplateName:l.computed("controller.infoWindowTemplateName","parentView.markerInfoWindowTemplateName",function(){return this.get("controller.infoWindowTemplateName")||this.get("parentView.markerInfoWindowTemplateName")}).readOnly(),infoWindowAnchor:i("googleObject"),isInfoWindowVisible:r("controller.isInfoWindowVisible"),hasInfoWindow:l.computed("parentView.markerHasInfoWindow","controller.hasInfoWindow",function(){var e=this.get("controller.hasInfoWindow");return null===e||void 0===e?!!this.get("parentView.markerHasInfoWindow"):e}).readOnly(),map:i("parentView.map"),initGoogleMarker:l.on("didInsertElement",function(){var e;a.hasGoogleLib()&&!this.get("googleObject")&&(e=this.serializeGoogleOptions(),l.debug("[google-maps] creating new marker: %@".fmt(e)),this.set("googleObject",new google.maps.Marker(e)),this.synchronizeEmberObject())}),destroyGoogleMarker:l.on("willDestroyElement",function(){var e=this.get("googleObject");e&&(e.setMap(null),this.set("googleObject",null))}),actions:{handleMarkerEvent:function(){var e=arguments,t=e,n=[].slice.call(t),o=this.get("lastGoogleEventName");"click"===o?this.set("isInfoWindowVisible",!0):l.warn("[google-map] unhandled marker event %@ with arguments %@".fmt(o,n.join(", ")))}}});o["default"]=h}),define("dummy/views/google-map/polyline",["ember","ember-google-map/core/helpers","ember-google-map/mixins/google-object","exports"],function(e,t,n,o){"use strict";var l=e["default"],a=t["default"],s=n["default"],r=l.computed.alias,i=l.computed.oneWay,h=l.View.extend(s,{templateName:"google-map/polyline",googleProperties:{isClickable:{name:"clickable",optionOnly:!0},isVisible:{name:"visible",event:"visible_changed"},isDraggable:{name:"draggable",event:"draggable_changed"},isEditable:{name:"editable",event:"editable_changed"},isGeodesic:{name:"geodesic",optionOnly:!0},icons:{optionOnly:!0},zIndex:{optionOnly:!0,cast:a.cast.integer},map:{readOnly:!0},strokeColor:{optionOnly:!0},strokeWeight:{optionOnly:!0},strokeOpacity:{optionOnly:!0}},googleEvents:l.computed("controller.googleEvents",function(e,t){var n=arguments,o=n;return o.length<2&&(t=l.merge({click:"handlePolylineEvent",dblclick:"handlePolylineEvent",drag:"handlePolylineEvent",dragend:"handlePolylineEvent",dragstart:"handlePolylineEvent",mousedown:"handlePolylineEvent",mouseout:"handlePolylineEvent",mouseover:"handlePolylineEvent",mouseup:"handlePolylineEvent",rightclick:"handlePolylineEvent"},this.get("controller.googleEvents")||{})),t}),strokeColor:r("controller.strokeColor"),strokeWeight:r("controller.strokeWeight"),strokeOpacity:r("controller.strokeOpacity"),zIndex:r("controller.zIndex"),isVisible:r("controller.isVisible"),isDraggable:r("controller.isDraggable"),isClickable:r("controller.isClickable"),isEditable:r("controller.isEditable"),icons:r("controller.icons"),map:i("parentView.map"),initGooglePolyline:l.on("didInsertElement",function(){var e;a.hasGoogleLib()&&!this.get("googleObject")&&(e=this.serializeGoogleOptions(),e.path=this.get("controller._path.googleArray"),l.debug("[google-maps] creating new polyline: %@".fmt(e)),this.set("googleObject",new google.maps.Polyline(e)),this.synchronizeEmberObject())}),destroyGooglePolyline:l.on("willDestroyElement",function(){var e=this.get("googleObject");e&&(e.setMap(null),this.set("googleObject",null))}),actions:{handlePolylineEvent:function(){var e=arguments,t=e,n=[].slice.call(t),o=this.get("lastGoogleEventName");l.warn("[google-map] unhandled polyline event %@ with arguments %@".fmt(o,n.join(", ")))}}});o["default"]=h}),define("dummy/config/environment",["ember"],function(e){var t="dummy";try{var n=t+"/config/environment",o=e["default"].$('meta[name="'+n+'"]').attr("content"),l=JSON.parse(unescape(o));return{"default":l}}catch(a){throw new Error('Could not read config from meta tag with name "'+n+'".')}}),runningTests?require("dummy/tests/test-helper"):require("dummy/app")["default"].create({});